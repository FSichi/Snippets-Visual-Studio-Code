{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Insertar Console Log":{
		"prefix": "cl",
		"body": [
			"console.log();"
		],
		"description": "Insertar Console Log",
	},

	"Insertar Function de TS":{
		"prefix": "gft",
		"body": [
			"function nombre(){"	,
			"",
			"}"
		],
		"description": "Insertar Funcion con metodo estilo JS",
	},

	"Insertar Alert":{
		"prefix": "a",
		"body": [
			"alert();"
		],
		"description": "Insertar Alert",
	},

	"Crear for generico":{

		"prefix": "gfor",
		"body": [
			"for(var i = 0 ; i < array.length ; i++){",
			" ",
			"}"
		],
		"description": "Generar Estructura de for"
	},

	"Crear ForEach":{
		"prefix": "gforE",
		"body": [

			"array.forEach(element => {",
			"",
			"});"
		],
		"description":  "Generar Estructura de forEach"

	},

	"Declarar Var Doc":{
		"prefix": "gD",
		"body": [
			"const elemento = document.getElementById('id');"
		],
		"description": "Generar Variable de Doc ID"
	},

	"Generar Funcion":{
		"prefix": "gf",
		"body": [

				"const nombreFuncion = () => {"	,
				"",
			 	"}"
		],
		"description": "Generar Prototipo de Funcion"
	},
	"Generar Funcion Export":{
		"prefix": "gef",
		"body": [

				"export const nombreFuncion = () => {"	,
				"",
				"return",
			 	"}"
		],
		"description": "Generar Prototipo de Funcion"
	},

	"Generar Add Event Listener":{
		"prefix": "gAEL",
		"body": [
			"elemento.addEventListener('click', (e) => {",
				"",
				"e.preventDefault();",
				"",
			  "});"
		],
		"description": "Generar Prototipo de AddEventListener"
	},

	"React-Redux useDispatch": {
		"prefix": "gUseDispatch",
		"body": [
			"const dispatch = useDispatch();",
		],
		"description": "Crea el useDispatch de React Redux"
	},
	"React-Redux useSelector": {
		"prefix": "gUseSelector",
		"body": [
			"const state = useSelector( state => state );",
		],
		"description": "Crea el useSelector de React Redux"
	},
}